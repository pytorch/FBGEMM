# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# This workflow is used for FBGEMM_GPU-CUDA Benchmarking
name: FBGEMM_GPU-CUDA Benchmark

on:
  # PR Trigger (enabled for regression checks and debugging)
  #
  pull_request:
    branches:
      - main

  # Manual Trigger
  #
  workflow_dispatch:
    inputs:
      pytorch-channel-version:
        description: Package Channel + Version to Use for PyTorch Installation, in `<channel>[/<version>]` Format
        type: string
        required: false
        default: ""

concurrency:
  # Cancel previous runs in the PR if a new commit is pushed
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: ${{ github.repository_owner == 'pytorch' }}
    uses: ./.github/workflows/_fbgemm_gpu_cuda_build.yml
    with:
      matrix: >-
        {
          "build-target": [ "default" ],
          "host-machine": [
            { "arch": "x86", "instance": "linux.24xlarge" },
          ],
          "python-version": [ "3.13" ],
          "cuda-version": [ "12.8.1" ],
          "compiler": [ "gcc" ],
        }
      repo-ref: ${{ github.ref }}
      pytorch-channel-version: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.pytorch-channel-version) || 'nightly' }}

  benchmark:
    needs: build
    uses: ./.github/workflows/_fbgemm_gpu_cuda_test.yml
    with:
      matrix: >-
        {
          "build-target": [ "default" ],
          "host-machine": [
            { "arch": "x86", "instance": "linux.g5.4xlarge.nvidia.gpu" },
          ],
          "python-version": [ "3.13" ],
          "cuda-version": [ "12.8.1" ],
          "compiler": [ "gcc" ],
        }
      repo-ref: ${{ github.ref }}
      pytorch-channel-version: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.pytorch-channel-version) || 'nightly' }}
      run-target: benchmark
      extra-env: >-
        {
          "ENFORCE_CUDA_DEVICE": 1
        }
