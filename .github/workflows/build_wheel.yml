name: Build Wheel

on:
  workflow_call:
    inputs:
      release_version:
        required: true
        type: string
      upload_pypi:
        required: true
        type: boolean

jobs:
  setup_wheel_jobs:
    runs-on: [ubuntu-latest]
    outputs:
      pytorch_channel: ${{ steps.output_variables.outputs.pytorch_channel }}
      fbgemm_package_name: ${{ steps.output_variables.outputs.fbgemm_package_name }}
      torchrec_package_name: ${{ steps.output_variables.outputs.torchrec_package_name }}
    steps:
    - id: output_variables
      run: |
        if [ x"${{ inputs.release_version }}" == x"nightly" ]; then
          echo "pytorch_channel=pytorch-nightly" >> $GITHUB_OUTPUT
          echo "fbgemm_package_name=fbgemm_gpu_nightly" >> $GITHUB_OUTPUT
          echo "torchrec_package_name=torchrec_nightly" >> $GITHUB_OUTPUT
        elif [ x"${{ inputs.release_version }}" == x"prerelease" ]; then
          echo "pytorch_channel=pytorch-test" >> $GITHUB_OUTPUT
          echo "fbgemm_package_name=fbgemm_gpu_test" >> $GITHUB_OUTPUT
          echo "torchrec_package_name=torchrec_test" >> $GITHUB_OUTPUT
        elif [ x"${{ inputs.release_version }}" == x"release" ]; then
          echo "pytorch_channel=pytorch" >> $GITHUB_OUTPUT
          echo "fbgemm_package_name=fbgemm_gpu" >> $GITHUB_OUTPUT
          echo "torchrec_package_name=torchrec" >> $GITHUB_OUTPUT
        else
          echo "Error: unknown release_version ${{ inputs.release_version }}"
          exit 1
        fi

  # Build on CPU hosts and upload *.whl as an GitHub Action artifact
  build_wheel:
    needs: [setup_wheel_jobs]
    strategy:
      matrix:
        os: [linux.4xlarge]
        python-version: ["3.8", "3.9", "3.10"]
        cuda-tag: ["cpu", "cu11"]

    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      job-name: build_wheel (py${{ matrix.python-version }}-${{ matrix.cuda-tag }})
      runner: ${{ matrix.os }}
      repository: pytorch/fbgemm
      gpu-arch-type: cpu
      upload-artifact: ${{ needs.setup_wheel_jobs.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}
      timeout: 120
      script: |
        set -x
        # Checkout FBGEMM_GPU
        git submodule update --init

        # Build wheel
        if [ x"${{ matrix.cuda-tag }}" == x"cpu" ]; then
          # Empty string
          CUDA_VERSION=""
        else
          CUDA_VERSION="11.7.1"
        fi
        bash .github/scripts/build_wheel.bash -v -p ${{ matrix.python-version }} -o ${{ needs.setup_wheel_jobs.outputs.fbgemm_package_name }} -P ${{ needs.setup_wheel_jobs.outputs.pytorch_channel }} -c "${CUDA_VERSION}" -m "/opt/conda"

        # Put a wheel file in RUNNER_ARTIFACT_DIR
        FBGEMM_ARTIFACT_PATH="${RUNNER_ARTIFACT_DIR}/${{ needs.setup_wheel_jobs.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}"
        mkdir -p "$FBGEMM_ARTIFACT_PATH"
        mv fbgemm_gpu/dist/*.whl "${FBGEMM_ARTIFACT_PATH}"

  # Download the GitHub Action artifact and test the artifact on a GPU machine
  test_wheel_gpu:
    needs: [setup_wheel_jobs, build_wheel]
    strategy:
      matrix:
        os: [linux.g5.4xlarge.nvidia.gpu]
        python-version: ["3.8", "3.9", "3.10"]
        cuda-tag: ["cu11"]

    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      job-name: test_wheel_gpu (py${{ matrix.python-version }}-${{ matrix.cuda-tag }})
      runner: ${{ matrix.os }}
      repository: pytorch/fbgemm
      gpu-arch-type: cuda
      gpu-arch-version: 11.7
      download-artifact: ${{ needs.setup_wheel_jobs.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}
      timeout: 120
      script: |
        set -x
        # Checkout FBGEMM_GPU
        git submodule update --init

        # Test Wheel
        CUDA_VERSION="11.7.1"
        FBGEMM_ARTIFACT_PATH="${RUNNER_ARTIFACT_DIR}/${{ needs.setup_wheel_jobs.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}"
        WHEEL_PATH="$(ls ${FBGEMM_ARTIFACT_PATH}/*.whl)"
        bash .github/scripts/test_wheel.bash -v -p ${{ matrix.python-version }} -P ${{ needs.setup_wheel_jobs.outputs.pytorch_channel }} -c "${CUDA_VERSION}" -w "${WHEEL_PATH}" -m "/opt/conda"

  # Download the GitHub Action artifact and test the artifact on a GPU machine
  test_wheel_cpu:
    needs: [setup_wheel_jobs, build_wheel]
    strategy:
      matrix:
        os: [linux.4xlarge]
        python-version: ["3.8", "3.9", "3.10"]
        cuda-tag: ["cpu"]

    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      job-name: test_wheel_cpu (py${{ matrix.python-version }}-${{ matrix.cuda-tag }})
      runner: ${{ matrix.os }}
      repository: pytorch/fbgemm
      download-artifact: ${{ needs.setup_wheel_jobs.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}
      timeout: 120
      script: |
        set -x
        # Checkout FBGEMM_GPU
        git submodule update --init

        # Test Wheel
        CUDA_VERSION=""
        FBGEMM_ARTIFACT_PATH="${RUNNER_ARTIFACT_DIR}/${{ needs.setup_wheel_jobs.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}"
        WHEEL_PATH="$(ls ${FBGEMM_ARTIFACT_PATH}/*.whl)"
        bash .github/scripts/test_wheel.bash -v -p ${{ matrix.python-version }} -P ${{ needs.setup_wheel_jobs.outputs.pytorch_channel }} -c "${CUDA_VERSION}" -w "${WHEEL_PATH}" -m "/opt/conda"

  # Upload the created wheels to PyPI
  upload_pypi:
    needs: [setup_wheel_jobs, test_wheel_gpu, test_wheel_cpu]
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10"]
        cuda-tag: ["cu11", "cpu"]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Download an artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.setup_wheel_jobs.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}
        path: ${{ runner.temp }}/artifacts/
    - name: Upload a wheel to PyPI
      if: ${{ inputs.upload_pypi }}
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        # Install Twine
        sudo apt install python3-pip
        pip3 install twine

        # Upload FBGEMM_GPU binary
        FBGEMM_ARTIFACT_PATH="${{ runner.temp }}/artifacts/${{ needs.setup_wheel_jobs.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}"
        WHEEL_PATH="$(ls ${FBGEMM_ARTIFACT_PATH}/*.whl)"
        twine upload --username __token__ --password "$PYPI_TOKEN" --skip-existing --verbose "$WHEEL_PATH"
