# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

name: Test and Upload Artifacts to PyPI
on:
  pull_request:

  # Manual Trigger
  #
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: Publish Artifact to PyPI
        type: boolean
        required: false
        default: false
      cuda_version:
        description: CUDA Version to Use for PyPI Publishing
        type: choice
        required: false
        options: [ "11.8.0", "12.1.1" ]
        default: "12.1.1"
      fbgemm_gpu_version:
        description: FBGEMM Version to publish
        type: string
        required: false
        default: "0.5.0rc1"

jobs:
  test_pypi_install_cpu:
    runs-on: ${{ matrix.host-machine.instance }}
    container:
      image: amazonlinux:2023
      options: --user root
    defaults:
      run:
        shell: bash
    env:
      PRELUDE: .github/scripts/setup_env.bash
      BUILD_ENV: test_install
    strategy:
      fail-fast: false
      matrix:
        host-machine: [
          { instance: "linux.4xlarge" },
          { instance: "linux.arm64.2xlarge" },
        ]
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]

    steps:
    - name: Setup Container
      run: yum update -y; yum install -y binutils findutils git pciutils sudo wget which

    - name: Checkout the Repository
      uses: actions/checkout@v3

    - name: Display System Info
      run: . $PRELUDE; print_system_info; print_ec2_info

    - name: Display GPU Info
      run: . $PRELUDE; print_gpu_info

    - name: Setup Miniconda
      run: . $PRELUDE; setup_miniconda $HOME/miniconda

    - name: Create Conda Environment
      run: . $PRELUDE; create_conda_environment $BUILD_ENV ${{ matrix.python-version }}

    - name: Install Build Tools
      run: . $PRELUDE; install_build_tools $BUILD_ENV

    - name: Install PyTorch-CPU
      run: . $PRELUDE; install_pytorch_pip $BUILD_ENV latest cpu

    - name: Download FBGEMM_GPU-CPU
      run: py=${{ matrix.python-version }}; cp=${py//.}; platform=$(uname -m); wget -q https://download.pytorch.org/whl/cpu/fbgemm_gpu-${{ github.event.inputs.fbgemm_gpu_version }}%2Bcpu-cp${cp}-cp${cp}-manylinux2014_${platform}.whl

    - name: Install FBGEMM_GPU-CPU
      run: . $PRELUDE; install_fbgemm_gpu_pip $BUILD_ENV github.event.inputs.fbgemm_gpu_version cpu

    - name: Test with PyTest
      timeout-minutes: 10
      run: . $PRELUDE; cd fbgemm_gpu/test; run_fbgemm_gpu_tests $BUILD_ENV cpu

    - name: Push FBGEMM_GPU Binary to PYPI
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true' && matrix.cuda-version == github.event.inputs.cuda_version }}
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: . $PRELUDE; publish_to_pypi $BUILD_ENV fbgemm_gpu-*.whl "$PYPI_TOKEN"


  test_pypi_install_cuda:
    runs-on: ${{ matrix.host-machine.instance }}
    defaults:
      run:
        shell: bash
    env:
      PRELUDE: .github/scripts/setup_env.bash
      BUILD_ENV: test_install
      ENFORCE_NVIDIA_GPU: 1
    strategy:
      fail-fast: false
      matrix:
        host-machine: [
          { instance: "linux.g5.4xlarge.nvidia.gpu" },
        ]
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]
        cuda-version: [ "11.8.0", "12.1.1" ]
        # Specify exactly ONE CUDA version for artifact publish
        cuda-version-publish: [ "12.1.1" ]

    steps:
    - name: Checkout the Repository
      uses: actions/checkout@v3

    - name: Install NVIDIA Drivers and NVIDIA-Docker Runtime
      uses: pytorch/test-infra/.github/actions/setup-nvidia@main

    - name: Display System Info
      run: . $PRELUDE; print_system_info; print_ec2_info

    - name: Display GPU Info
      run: . $PRELUDE; print_gpu_info

    - name: Setup Miniconda
      run: . $PRELUDE; setup_miniconda $HOME/miniconda

    - name: Create Conda Environment
      run: . $PRELUDE; create_conda_environment $BUILD_ENV ${{ matrix.python-version }}

    - name: Install Build Tools
      run: . $PRELUDE; install_build_tools $BUILD_ENV

    - name: Install CUDA
      run: . $PRELUDE; install_cuda $BUILD_ENV ${{ matrix.cuda-version }}

    - name: Install PyTorch-CUDA
      run: . $PRELUDE; install_pytorch_pip $BUILD_ENV latest cuda ${{ matrix.cuda-version }}

    - name: Download FBGEMM_GPU-CUDA
      run: py=${{ matrix.python-version }}; cp=${py//.}; platform=$(uname -m); c=${{ matrix.cuda-version }}; c=${c%.*}; c=${c//.}; cu="cu"${c}; wget -q https://download.pytorch.org/whl/${cu}/fbgemm_gpu-${{ github.event.inputs.fbgemm_gpu_version }}%2B${cu}-cp${cp}-cp${cp}-manylinux2014_${platform}.whl

    - name: Install FBGEMM_GPU-CUDA
      run: . $PRELUDE; install_fbgemm_gpu_pip $BUILD_ENV ${{ github.event.inputs.fbgemm_gpu_version }} cuda ${{ matrix.cuda-version }}

    - name: Test with PyTest
      timeout-minutes: 10
      run: . $PRELUDE; cd fbgemm_gpu/test; run_fbgemm_gpu_tests $BUILD_ENV

    - name: Push FBGEMM_GPU Binary to PYPI
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true' && matrix.cuda-version == github.event.inputs.cuda_version }}
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: . $PRELUDE; publish_to_pypi $BUILD_ENV fbgemm_gpu-*.whl "$PYPI_TOKEN"
