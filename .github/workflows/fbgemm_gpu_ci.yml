# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

name: FBGEMM_GPU CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_amd_gpu:
    if: ${{ false }}  # Disable the job for now
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        config: [[pip, 5.3]]

    steps:
    - name: Free space
      run: sudo rm -rf /usr/local/android /usr/share/dotnet /usr/local/share/boost /opt/ghc /usr/local/share/chrom* /usr/share/swift /usr/local/julia* /usr/local/lib/android

    - uses: actions/checkout@v3

    - name: Install ROCm
      shell: bash
      run: |
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10
        wget https://repo.radeon.com/amdgpu-install/5.3/ubuntu/focal/amdgpu-install_5.3.50300-1_all.deb
        export DEBIAN_FRONTEND=noninteractive
        sudo apt install -y ./amdgpu-install_5.3.50300-1_all.deb
        amdgpu-install -y --usecase=hiplibsdk,rocm --no-dkms
        sudo rm amdgpu-install_5.3.50300-1_all.deb

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y git pip python3-dev mesa-common-dev clang comgr libopenblas-dev jp intel-mkl-full locales libnuma-dev
        sudo apt-get install -y hipify-clang || true
        sudo apt-get install -y miopen-hip miopen-hip-dev
        sudo pip install cmake scikit-build ninja jinja2 numpy hypothesis --no-input
        sudo apt-get clean
        # Install PyTorch (nightly) as required by fbgemm_gpu
        sudo pip install --pre torch torchvision --extra-index-url https://download.pytorch.org/whl/nightly/rocm5.3/

    - name: Checkout submodules
      shell: bash
      run: |
        cd fbgemm_gpu
        git submodule sync
        git submodule update --init --recursive

    - name: Build fbgemm_gpu
      shell: bash
      run: |
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10
        cd fbgemm_gpu
        # build for MI250 only to save time.
        sudo PYTORCH_ROCM_ARCH=gfx90a python3 setup.py build develop

    - name: Test fbgemm_gpu installation
      shell: bash
      run: |
        cd fbgemm_gpu
        cd test
        python3 input_combine_test.py -v
        python3 quantize_ops_test.py -v
        python3 sparse_ops_test.py -v
        python3 -c "import fbgemm_gpu"
        python3 -c "import fbgemm_gpu.split_embedding_codegen_lookup_invokers"

  test_amd_gpu:
    if: ${{ false }}  # Disable the job for now
    runs-on: rocm
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: pre-checkout
      shell: bash
      run: |
        if [ -d ${{ github.workspace }} ]
        then
          sudo chown -R $USER:$USER ${{ github.workspace }}
        fi
        sudo add-apt-repository ppa:git-core/ppa
        sudo apt update
        sudo apt -y install --only-upgrade git

    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        submodules: 'true'

    - name: build fbgemm_gpu and test
      shell: bash
      run: |
        set -eux
        env
        ls -l
        DOCKER_IMAGE=rocm/pytorch:rocm5.4_ubuntu20.04_py3.8_pytorch_staging_base
        docker pull $DOCKER_IMAGE
        JENKINS_REPO_DIR=fbgemm-private-jenkins
        JENKINS_REPO_DIR_BAREMETAL=$PWD
        JENKINS_REPO_DIR_DOCKER=/workspace/$JENKINS_REPO_DIR
        DOCKER_OPTIONS="\
        --user 0 \
        --network=host \
        --ipc=host \
        --shm-size 16G \
        --group-add video \
        --cap-add=SYS_PTRACE \
        --security-opt seccomp=unconfined \
        --device=/dev/kfd \
        --device=/dev/dri \
        -v $JENKINS_REPO_DIR_BAREMETAL:$JENKINS_REPO_DIR_DOCKER
        "
        docker run $DOCKER_OPTIONS $DOCKER_IMAGE $JENKINS_REPO_DIR_DOCKER/.jenkins/rocm/build_and_test.sh $JENKINS_REPO_DIR_DOCKER

  build_and_test_cpu:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      PRELUDE: .github/scripts/setup_env.bash
      BUILD_ENV: build_binary
    strategy:
      matrix:
        os: [ ubuntu-20.04, ubuntu-latest ]
        python-version: [ "3.8", "3.9", "3.10" ]

    steps:
    - name: Checkout the Repository
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Display System Info
      run: . $PRELUDE; print_system_info

    - name: Setup Miniconda
      run: |
        . $PRELUDE; setup_miniconda $HOME/miniconda
        echo "${HOME}/miniconda/bin" >> $GITHUB_PATH
        echo "CONDA=${HOME}/miniconda" >> $GITHUB_PATH

    - name: Create Conda Environment
      run: . $PRELUDE; create_conda_environment $BUILD_ENV ${{ matrix.python-version }}

    - name: Install Build Tools
      run: . $PRELUDE; install_build_tools $BUILD_ENV

    - name: Install PyTorch
      run:  . $PRELUDE; install_pytorch_pip $BUILD_ENV nightly cpu

    - name: Prepare FBGEMM Build
      run: . $PRELUDE; cd fbgemm_gpu; prepare_fbgemm_gpu_build $BUILD_ENV

    - name: Build and Install FBGEMM_GPU (CPU version)
      run: . $PRELUDE; cd fbgemm_gpu; build_fbgemm_gpu_install $BUILD_ENV cpuonly

    - name: Test with PyTest
      run: . $PRELUDE; cd fbgemm_gpu/test; run_fbgemm_gpu_tests $BUILD_ENV cpuonly
