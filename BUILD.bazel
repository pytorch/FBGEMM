# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

load("@bazel_skylib//lib:paths.bzl", "paths")
load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
load("defs.bzl", "get_fbgemm_avx2_srcs", "get_fbgemm_inline_avx2_srcs", "get_fbgemm_avx512_srcs", "get_fbgemm_inline_avx512_srcs", "get_fbgemm_base_srcs", "get_fbgemm_generic_srcs", "get_fbgemm_public_headers", "get_fbgemm_tests")

CXX_FLAGS = select({
    "@bazel_tools//src/conditions:windows": [
        "/std:c++17"
    ],
    "//conditions:default": [
        "-std=c++17"
    ],
})

AVX2_FLAGS = select({
    "@bazel_tools//src/conditions:windows": [
        "/arch:AVX2"
     ],
    "//conditions:default": [
        "-m64",
        "-mavx2",
        "-mfma",
        "-mf16c",
        "-masm=intel",
     ],
})

AVX512_FLAGS = select({
    "@bazel_tools//src/conditions:host_windows": [
        "/arch:AVX512"
    ],
    "//conditions:default": [
        "-m64",
        "-mfma",
        "-mavx512f",
        "-mavx512bw",
        "-mavx512dq",
        "-mavx512vl",
        "-masm=intel",
    ],
})

cc_library(
    name = "fbgemm_base",
    srcs = get_fbgemm_base_srcs(),
    hdrs = glob(["src/*.h"]),
    includes = [
        "src",
    ],
    deps = [
        ":fbgemm_headers",
        "@cpuinfo",
        "@asmjit",
    ],
    copts = CXX_FLAGS,
    linkstatic = 1,
)

cc_library(
    name = "fbgemm",
    visibility = ["//visibility:public"],
    srcs = get_fbgemm_generic_srcs(),
    hdrs = glob(["src/*.h"]),
    includes = [
        "src",
    ],
    copts = CXX_FLAGS,
    deps = [
        ":fbgemm_avx2",
        ":fbgemm_inline_avx2",
        ":fbgemm_avx512",
        ":fbgemm_inline_avx512",
        ":fbgemm_base",
        ":fbgemm_headers",
    ],
    linkstatic = 1,
)

cc_library(
    name = "fbgemm_avx2",
    srcs = select({
        "@bazel_tools//src/conditions:host_windows": get_fbgemm_avx2_srcs(True),
        "//conditions:default": get_fbgemm_avx2_srcs(False),
    }),
    hdrs = glob(["src/*.h"]),
    copts = CXX_FLAGS + AVX2_FLAGS,
    deps = [
        ":fbgemm_base",
        ":fbgemm_headers",
    ],
    linkstatic = 1,
)

cc_library(
    name = "fbgemm_inline_avx2",
    srcs = select({
        "@bazel_tools//src/conditions:host_windows": get_fbgemm_inline_avx2_srcs(msvc=True),
        "//conditions:default": get_fbgemm_inline_avx2_srcs(msvc=False),
    }),
    hdrs = glob(["src/*.h"]),
    copts = CXX_FLAGS + AVX2_FLAGS,
    deps = [
        ":fbgemm_base",
        ":fbgemm_headers",
    ],
    linkstatic = 1,
)

cc_library(
    name = "fbgemm_avx512",
    srcs = select({
        "@bazel_tools//src/conditions:host_windows": get_fbgemm_avx512_srcs(msvc=True),
        "//conditions:default": get_fbgemm_avx512_srcs(msvc=False),
    }),
    hdrs = glob(["src/*.h"]),
    copts = CXX_FLAGS + AVX512_FLAGS,
    deps = [
        ":fbgemm_base",
        ":fbgemm_headers",
    ],
    linkstatic = 1,
)

cc_library(
    name = "fbgemm_inline_avx512",
    srcs = select({
        "@bazel_tools//src/conditions:host_windows": get_fbgemm_inline_avx512_srcs(msvc=True),
        "//conditions:default": get_fbgemm_inline_avx512_srcs(msvc=False),
    }),
    hdrs = glob(["src/*.h"]),
    copts = CXX_FLAGS + AVX512_FLAGS,
    deps = [
        ":fbgemm_base",
        ":fbgemm_headers",
    ],
    linkstatic = 1,
)

cc_library(
    name = "fbgemm_headers",
    hdrs = get_fbgemm_public_headers(),
    includes = [
        "include",
    ],
    copts = CXX_FLAGS,
    visibility = ["//visibility:public"],
)

# This header is included from pytorch/caffe2/quantization/server/conv_dnnlowp_op.cc
cc_library(
    name = "fbgemm_src_headers",
    hdrs = [
        "src/RefImplementations.h",
    ],
    include_prefix = "fbgemm",
    copts = CXX_FLAGS,
    visibility = ["//visibility:public"],
)


cc_library(
    name = "test_utils",
    hdrs = get_fbgemm_public_headers() + glob(["test/*.h", "bench/*.h"]),
    srcs = [
        "bench/BenchUtils.cc",
        "test/EmbeddingSpMDMTestUtils.cc",
        "test/QuantizationHelpers.cc",
        "test/TestUtils.cc",
    ],
    includes = [
        "bench",
        "test",
    ],
    linkopts = [
        "-lrt",
    ],
    copts = CXX_FLAGS,
    linkstatic = 1,
    deps = [
          ":fbgemm",
          "@com_google_googletest//:gtest_main",
    ],
)

[
    cc_test(
        name = paths.split_extension(paths.basename(filename))[0],
        size = "medium",
        srcs = [
            filename,
        ],
        copts = CXX_FLAGS,
        deps = [
            ":test_utils",
        ],
    ) for filename in get_fbgemm_tests()
]
