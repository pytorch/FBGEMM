# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

################################################################################
# CMake Prelude
################################################################################

# A minimum CMake version of 3.21+ is needed to support the required C and C++
# standard versions
cmake_minimum_required(VERSION 3.21 FATAL_ERROR)

# Set up paths
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/modules")
set(FBGEMM_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(FBGEMM_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})

include(${CMAKE_MODULE_PATH}/Utilities.cmake)

# C++ Compiler Setup - must be set BEFORE project declaration
include(${CMAKE_MODULE_PATH}/CxxCompilerSetup.cmake)

# Load cpp_library()
include(${CMAKE_MODULE_PATH}/CppLibrary.cmake)

# Define function to extract filelists from defs.bzl file
function(get_filelist name outputvar)
  execute_process(
    COMMAND "${Python_EXECUTABLE}" -c
            "exec(open('defs.bzl').read());print(';'.join(${name}))"
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
    OUTPUT_VARIABLE _tempvar
    RESULT_VARIABLE _resvar
    ERROR_VARIABLE _errvar)
  if(NOT "${_resvar}" EQUAL "0")
    message(WARNING "Failed to execute Python (${Python_EXECUTABLE})\n"
      "Result: ${_resvar}\n"
      "Error: ${_errvar}\n")
  endif()
  string(REPLACE "\n" "" _tempvar "${_tempvar}")
  set(${outputvar} ${_tempvar} PARENT_SCOPE)
endfunction()


################################################################################
# FBGEMM Build Kickstart
################################################################################

project(fbgemm VERSION 0.1 LANGUAGES CXX C)

# Install libraries into correct locations on all platforms
include(GNUInstallDirs)

# Load Python
find_package(Python)

set(FBGEMM_LIBRARY_TYPE "default"
  CACHE STRING
  "Type of library (shared, static, or default) to build")

set_property(CACHE FBGEMM_LIBRARY_TYPE PROPERTY STRINGS DEFAULT STATIC SHARED)
option(FBGEMM_BUILD_TESTS "Build fbgemm unit tests" ON)
option(FBGEMM_BUILD_BENCHMARKS "Build fbgemm benchmarks" ON)
option(FBGEMM_BUILD_DOCS "Build fbgemm documentation" OFF)
# option(FBGEMM_BUILD_FBGEMM_GPU "Build fbgemm_gpu library" OFF)
option(FBGEMM_USE_IPO "Build fbgemm with interprocedural optimization" OFF)
option(DISABLE_FBGEMM_AUTOVEC "Disable FBGEMM Autovec" OFF)

if(FBGEMM_LIBRARY_TYPE STREQUAL "DEFAULT")
  if(BUILD_SHARED_LIB)
    set(FBGEMM_LIBRARY_TYPE "SHARED")
  else()
    set(FBGEMM_LIBRARY_TYPE "STATIC")
  endif()
else()
  string(TOUPPER "${FBGEMM_LIBRARY_TYPE}" FBGEMM_LIBRARY_TYPE)
endif()

if(FBGEMM_BUILD_TESTS)
  enable_testing()
endif()

# Add address sanitizer
set(USE_SANITIZER "" CACHE STRING "options include address, leak, ...")

# We should default to a Release build
if(NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
endif()

if(DISABLE_FBGEMM_AUTOVEC)
  add_compile_definitions("DISABLE_FBGEMM_AUTOVEC")
endif()

################################################################################
# AVX512 Support
################################################################################

include(CheckCXXCompilerFlag)
if(MSVC)
  CHECK_CXX_COMPILER_FLAG(/arch:AVX512 COMPILER_SUPPORTS_AVX512)
  set(MSVC_BOOL True)
else(MSVC)
  CHECK_CXX_COMPILER_FLAG(-mavx512f COMPILER_SUPPORTS_AVX512)
  set(MSVC_BOOL False)
endif(MSVC)
if(NOT COMPILER_SUPPORTS_AVX512)
  message(FATAL_ERROR "A compiler with AVX512 support is required.")
endif()

################################################################################
# GNU F2H_IEEE Support
################################################################################

# Check if compiler supports __gnu_f2h_ieee
include(${CMAKE_CURRENT_LIST_DIR}/cmake/modules/FindGnuH2fIeee.cmake)

if(NOT HAVE_GNU_F2H_IEEE)
  add_definitions(-DMISSING_GNU_F2H_IEEE)
endif()

################################################################################
# Setup OpenMP Flags
################################################################################

find_package(OpenMP)

if(OpenMP_FOUND)
  message(STATUS "OpenMP found: OpenMP_C_INCLUDE_DIRS = ${OpenMP_C_INCLUDE_DIRS}")
else()
  message(WARNING "OpenMP is not supported by the compiler")
endif()

if(FBGEMM_USE_IPO)
  include(CheckIPOSupported)
  check_ipo_supported()
endif()

################################################################################
# Prepare Sources
################################################################################

if(NOT MSVC)
  set_source_files_properties(
    src/FbgemmFP16UKernelsAvx2.cc
    src/FbgemmFP16UKernelsAvx512.cc
    src/FbgemmFP16UKernelsAvx512_256.cc
    PROPERTIES COMPILE_FLAGS "-masm=intel")

  set_source_files_properties(src/PackMatrix.cc
    PROPERTIES COMPILE_FLAGS "-Wno-infinite-recursion")

  # Workaround for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80947
  if(CMAKE_COMPILER_IS_GNUCXX AND (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.3.0))
    set_source_files_properties(
      src/GenerateKernelU8S8S32ACC32.cc
      src/GenerateKernelDirectConvU8S8S32ACC32.cc
      PROPERTIES COMPILE_FLAGS "-Wno-attributes")
  endif()
endif()

################################################################################
# FBGEMM Generic Target
################################################################################

get_filelist("get_fbgemm_generic_srcs(with_base=True)" FBGEMM_GENERIC_SRCS)

if(FBGEMM_LIBRARY_TYPE STREQUAL STATIC)
  set(fbgemm_generic_defs FBGEMM_STATIC)
endif()

cpp_library(
  PREFIX
    fbgemm_generic
  TYPE
    OBJECT
  SRCS
    ${FBGEMM_GENERIC_SRCS}
  INCLUDE_DIRS
    $<BUILD_INTERFACE:${FBGEMM_SOURCE_DIR}>
    $<BUILD_INTERFACE:${FBGEMM_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${FBGEMM_SOURCE_DIR}/bench>
  SANITIZER_OPTIONS
    "${USE_SANITIZER}"
  DEFINITIONS
    ${fbgemm_generic_defs}
  DEPS
    $<BUILD_INTERFACE:cpuinfo>
    $<BUILD_INTERFACE:asmjit>
)

set(fbgemm_targets fbgemm_avx2 fbgemm_avx512)

################################################################################
# FBGEMM AVX2 Target
################################################################################

get_filelist("get_fbgemm_avx2_srcs(msvc=${MSVC_BOOL})" FBGEMM_AVX2_SRCS)
get_filelist("get_fbgemm_inline_avx2_srcs(msvc=${MSVC_BOOL})" FBGEMM_AVX2_INLINE_SRCS)

cpp_library(
  PREFIX
    fbgemm_avx2
  TYPE
    OBJECT
  SRCS
    ${FBGEMM_AVX2_SRCS}
    ${FBGEMM_AVX2_INLINE_SRCS}
  CC_FLAGS
    -m64 -mavx2 -mf16c -mfma
  MSVC_FLAGS
    /arch:AVX2
  DEPS
    $<BUILD_INTERFACE:cpuinfo>
    $<BUILD_INTERFACE:asmjit>
    fbgemm_generic
)

################################################################################
# FBGEMM AVX512 Target
################################################################################

get_filelist("get_fbgemm_avx512_srcs(msvc=${MSVC_BOOL})" FBGEMM_AVX512_SRCS)
get_filelist("get_fbgemm_inline_avx512_srcs(msvc=${MSVC_BOOL})" FBGEMM_AVX512_INLINE_SRCS)

cpp_library(
  PREFIX
    fbgemm_avx512
  TYPE
    OBJECT
  SRCS
    ${FBGEMM_AVX512_SRCS}
    ${FBGEMM_AVX512_INLINE_SRCS}
  CC_FLAGS
    -m64 -mavx2 -mfma -mavx512f -mavx512bw -mavx512dq -mavx512vl
  MSVC_FLAGS
    /arch:AVX512
  DEPS
    $<BUILD_INTERFACE:cpuinfo>
    $<BUILD_INTERFACE:asmjit>
    fbgemm_generic
)

################################################################################
# FBGEMM Autovec Target
################################################################################

if(NOT DISABLE_FBGEMM_AUTOVEC)
  get_filelist("get_fbgemm_autovec_srcs()" FBGEMM_AUTOVEC_SRCS)

  cpp_library(
    PREFIX
      fbgemm_autovec
    TYPE
      OBJECT
    SRCS
      ${FBGEMM_AUTOVEC_SRCS}
    ENABLE_IPO
      ${FBGEMM_USE_IPO}
    DEPS
      $<BUILD_INTERFACE:cpuinfo>
      $<BUILD_INTERFACE:asmjit>
      fbgemm_generic
  )

  list(APPEND fbgemm_targets fbgemm_autovec)
endif()

################################################################################
# FBGEMM Library Target
################################################################################

cpp_library(
  PREFIX
    fbgemm
  TYPE
    ${FBGEMM_LIBRARY_TYPE}
  DEPS
    fbgemm_generic
    ${fbgemm_targets}
)

get_filelist("get_fbgemm_public_headers()" FBGEMM_PUBLIC_HEADERS)

install(
  FILES ${FBGEMM_PUBLIC_HEADERS}
  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/fbgemm")

install(
  EXPORT fbgemmLibraryConfig
  DESTINATION share/cmake/fbgemm
  FILE fbgemmLibraryConfig.cmake)

################################################################################
# Asmjit Target
################################################################################

if(NOT TARGET asmjit)
  # Download asmjit from github if ASMJIT_SRC_DIR is not specified.
  if(NOT DEFINED ASMJIT_SRC_DIR)
    set(ASMJIT_SRC_DIR "${FBGEMM_SOURCE_DIR}/external/asmjit"
      CACHE STRING "asmjit source directory from submodules")
  endif()

  # Build asmjit
  # For MSVC shared build, asmjit needs to be shared also.
  if(MSVC AND (FBGEMM_LIBRARY_TYPE STREQUAL "shared"))
    set(ASMJIT_STATIC OFF)
  else()
    set(ASMJIT_STATIC ON)
  endif()
  set(ASMJIT_NO_INSTALL ON)

  add_subdirectory("${ASMJIT_SRC_DIR}" "${FBGEMM_BINARY_DIR}/asmjit")
  set_property(TARGET asmjit PROPERTY POSITION_INDEPENDENT_CODE ON)
endif()

################################################################################
# Cpuinfo Target
################################################################################

if(NOT TARGET cpuinfo)
  #Download cpuinfo from github if CPUINFO_SOURCE_DIR is not specified.
  if(NOT DEFINED CPUINFO_SOURCE_DIR)
    set(CPUINFO_SOURCE_DIR "${FBGEMM_SOURCE_DIR}/external/cpuinfo"
      CACHE STRING "cpuinfo source directory from submodules")
  endif()

  #build cpuinfo
  set(CPUINFO_BUILD_UNIT_TESTS OFF CACHE BOOL "Do not build cpuinfo unit tests")
  set(CPUINFO_BUILD_MOCK_TESTS OFF CACHE BOOL "Do not build cpuinfo mock tests")
  set(CPUINFO_BUILD_BENCHMARKS OFF CACHE BOOL "Do not build cpuinfo benchmarks")
  set(CPUINFO_LIBRARY_TYPE static CACHE STRING "Set lib type to static")
  add_subdirectory("${CPUINFO_SOURCE_DIR}" "${FBGEMM_BINARY_DIR}/cpuinfo")
  set_property(TARGET cpuinfo PROPERTY POSITION_INDEPENDENT_CODE ON)
endif()

################################################################################
# Optional Targets
################################################################################

if(FBGEMM_BUILD_TESTS)
  add_subdirectory(test)
endif()

if(FBGEMM_BUILD_BENCHMARKS)
  add_subdirectory(bench)
endif()

if(FBGEMM_BUILD_DOCS)
  add_subdirectory(docs)
endif()
